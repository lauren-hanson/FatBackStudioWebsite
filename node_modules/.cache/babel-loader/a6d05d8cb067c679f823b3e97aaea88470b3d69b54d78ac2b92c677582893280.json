{"ast":null,"code":"var _jsxFileName = \"/Users/lohanson/Desktop/FatBackStudio/fatback-studio/src/components/calendar/Calendar.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\n//import {CalendarDates} from \"./CalendarDates.js\"\nimport \"./Calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StudioCalendar = () => {\n  _s();\n  const [date, setDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState();\n  const [calendarText, setCalendarText] = useState('No date selected');\n  // const [startDate, setStartDate] = useState({})\n  // const [endDate, setEndDate] = useState({})\n  //const [acceptedRequests, setAccepted] = useState([])\n\n  // Function to update selected date and calander text\n  const handleDateChange = value => {\n    setSelectedDate(value);\n    setCalendarText(`The selected Date is ${value.toDateString()}`);\n  };\n\n  // useEffect(() => {\n\n  //     fetch(`http://localhost:8088/requests?isAccepted=true`)\n  //         .then(response => response.json())\n  //         .then(acceptedDates => {\n  //             onChange(acceptedDates)\n  //         })\n  // }, [])\n\n  // const handleSaveDateButton = () => {\n\n  //     const setRecordingDate = {\n  //         start: startDate.date[0].toDateString()\n\n  //     }\n\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"Our Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-container\",\n        children: [/*#__PURE__*/_jsxDEV(Calendar, {\n          onChange: onChange,\n          value: date,\n          defaultView: \"month\",\n          nextLabel: \"month>>\",\n          nextAriaLabel: \"Go to next month\",\n          next2Label: \"year>>\",\n          next2AriaLabel: \"Go to next year\",\n          prevLabel: \"<<month\",\n          prevAriaLabel: \"Go to prev month\",\n          prev2Label: \"<<year\",\n          prev2AriaLabel: \"Go to prev year\",\n          calendarType: \"US\",\n          tileClassName: \"days\",\n          selectRange: true,\n          onClickDay: true\n\n          // onClickDay={(value, event) => alert('Clicked day: ', {value})}\n\n          // tileContent={({ activeStartDate, date, view }) => view === 'month' && date.getDay() === 0 ? <p>It's Sunday!</p> : null}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), console.log(date), \"Today's Date: \", date.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n/*\nexport const MyCalendar = () => {\n\n    const [date, setDate] = useState(new Date())\n\n    useEffect(() => { \n\n        fetch('')\n            .then(response => response.json())\n            .then((startDate) => { \n                setDate(startDate)\n            })\n    }, [])\n\n    return (\n        <>\n            \n            <div className=\"calendar-container\">\n                <Calendar onChange={setDate} value={date} defaultView='month' />\n                <p className=\"bold text-center\">Selected Date: {\"\"}{date.toDateString()}</p>\n            </div>\n            {date.length > 0 ? (\n                <p className='text-center'>\n                    <span className='bold'>Start:</span>{' '}\n                    {date[0].toDateString()}\n                    &nbsp;|&nbsp;\n                    <span className='bold'>End:</span> {date[1].toDateString()}\n                </p>) : (<p className='text-center'>\n                    <span className='bold'>Default selected date:</span>{' '}\n                    {date.toDateString()}\n                </p>)}\n        </>\n    )\n}\n*/\n\n/*\nfunction App() {\n\n  const [value, onChange] = useState([new Date()])\n\n  return (\n    <div>\n      <Calendar\n        onChange={onChange}\n        value={value}\n        defaultView='month'\n        nextLabel='month>>'\n        nextAriaLabel='Go to next month'\n        next2Label='year>>'\n        next2AriaLabel='Go to next year'\n        prevLabel='<<month'\n        prevAriaLabel='Go to prev month'\n        prev2Label='<<year'\n        prev2AriaLabel='Go to prev year'\n        calendarType=\"US\"\n        tileClassName=\"days\"\n        selectRange={true} />\n      {value.toString()}\n\n\n    </div>\n  )\n}\n*/\n_s(StudioCalendar, \"yR82TzOq+Xjd61FtTKSmNYhaX3w=\");\n_c = StudioCalendar;\nvar _c;\n$RefreshReg$(_c, \"StudioCalendar\");","map":{"version":3,"names":["useEffect","useState","Calendar","StudioCalendar","date","setDate","Date","selectedDate","setSelectedDate","calendarText","setCalendarText","handleDateChange","value","toDateString","onChange","console","log"],"sources":["/Users/lohanson/Desktop/FatBackStudio/fatback-studio/src/components/calendar/Calendar.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport Calendar from 'react-calendar'\nimport 'react-calendar/dist/Calendar.css';\n//import {CalendarDates} from \"./CalendarDates.js\"\nimport \"./Calendar.css\"\n\n\n\nexport const StudioCalendar = () => {\n\n\n    const [date, setDate] = useState(new Date())\n    const [selectedDate, setSelectedDate] = useState()\n    const [calendarText, setCalendarText] = useState('No date selected')\n    // const [startDate, setStartDate] = useState({})\n    // const [endDate, setEndDate] = useState({})\n    //const [acceptedRequests, setAccepted] = useState([])\n\n    // Function to update selected date and calander text\n    const handleDateChange = (value) => {\n        setSelectedDate(value);\n        setCalendarText(`The selected Date is ${value.toDateString()}`);\n    };\n\n\n    // useEffect(() => {\n\n    //     fetch(`http://localhost:8088/requests?isAccepted=true`)\n    //         .then(response => response.json())\n    //         .then(acceptedDates => {\n    //             onChange(acceptedDates)\n    //         })\n    // }, [])\n\n    // const handleSaveDateButton = () => {\n\n    //     const setRecordingDate = {\n    //         start: startDate.date[0].toDateString()\n\n    //     }\n\n    // }\n\n\n    return (\n        <>\n            <div className='calendar'>\n                <h1 className='text-center'>Our Schedule</h1>\n                <div className='calendar-container'>\n                    <Calendar\n                        onChange={onChange}\n                        value={date}\n\n                        defaultView='month'\n                        nextLabel='month>>'\n                        nextAriaLabel='Go to next month'\n                        next2Label='year>>'\n                        next2AriaLabel='Go to next year'\n                        prevLabel='<<month'\n                        prevAriaLabel='Go to prev month'\n                        prev2Label='<<year'\n                        prev2AriaLabel='Go to prev year'\n                        calendarType=\"US\"\n                        tileClassName=\"days\"\n                        selectRange={true}\n\n                        onClickDay\n\n\n\n\n                    // onClickDay={(value, event) => alert('Clicked day: ', {value})}\n\n                    // tileContent={({ activeStartDate, date, view }) => view === 'month' && date.getDay() === 0 ? <p>It's Sunday!</p> : null}\n\n                    />\n                    {console.log(date)}\n\n                    Today's Date: {date.toDateString()}\n\n                </div>\n\n\n\n                {/* {date.length > 0 ? (\n                    <p className='text-center'>\n                        <span className='bold'>Start Date:</span>{' '}\n                        {date[0].toDateString()}\n                        &nbsp;|&nbsp;\n                        <span className='bold'>End Date:</span> {date[1].toDateString()}\n                    </p>\n                ) : (\n                    <p className='text-center'>\n                        <span className='bold'>Today's Date:</span>{' '}\n                        {date.toDateString()}\n                    </p>\n                )} */}\n\n\n\n            </div>\n            {/* \n            {dates.map(acceptedRequest => {\n                return <p className='text-center'>\n                    {acceptedRequest.bandName}<br></br>\n                    {acceptedRequest.startDate}<br></br>\n                    {acceptedRequest.endDate}\n\n\n                </p>\n            })\n\n            } */}\n\n            {/* <button>\n                Save New Dates\n            </button> */}\n        </>\n\n    )\n}\n\n\n\n\n/*\nexport const MyCalendar = () => {\n\n    const [date, setDate] = useState(new Date())\n\n    useEffect(() => { \n\n        fetch('')\n            .then(response => response.json())\n            .then((startDate) => { \n                setDate(startDate)\n            })\n    }, [])\n\n    return (\n        <>\n            \n            <div className=\"calendar-container\">\n                <Calendar onChange={setDate} value={date} defaultView='month' />\n                <p className=\"bold text-center\">Selected Date: {\"\"}{date.toDateString()}</p>\n            </div>\n            {date.length > 0 ? (\n                <p className='text-center'>\n                    <span className='bold'>Start:</span>{' '}\n                    {date[0].toDateString()}\n                    &nbsp;|&nbsp;\n                    <span className='bold'>End:</span> {date[1].toDateString()}\n                </p>) : (<p className='text-center'>\n                    <span className='bold'>Default selected date:</span>{' '}\n                    {date.toDateString()}\n                </p>)}\n        </>\n    )\n}\n*/\n\n\n/*\nfunction App() {\n\n  const [value, onChange] = useState([new Date()])\n\n  return (\n    <div>\n      <Calendar\n        onChange={onChange}\n        value={value}\n        defaultView='month'\n        nextLabel='month>>'\n        nextAriaLabel='Go to next month'\n        next2Label='year>>'\n        next2AriaLabel='Go to next year'\n        prevLabel='<<month'\n        prevAriaLabel='Go to prev month'\n        prev2Label='<<year'\n        prev2AriaLabel='Go to prev year'\n        calendarType=\"US\"\n        tileClassName=\"days\"\n        selectRange={true} />\n      {value.toString()}\n\n\n    </div>\n  )\n}\n*/"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAO,kCAAkC;AACzC;AACA,OAAO,gBAAgB;AAAA;AAAA;AAIvB,OAAO,MAAMC,cAAc,GAAG,MAAM;EAAA;EAGhC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,IAAIK,IAAI,EAAE,CAAC;EAC5C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,EAAE;EAClD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,kBAAkB,CAAC;EACpE;EACA;EACA;;EAEA;EACA,MAAMU,gBAAgB,GAAIC,KAAK,IAAK;IAChCJ,eAAe,CAACI,KAAK,CAAC;IACtBF,eAAe,CAAE,wBAAuBE,KAAK,CAACC,YAAY,EAAG,EAAC,CAAC;EACnE,CAAC;;EAGD;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;;EAEA;;EAGA,oBACI;IAAA,uBACI;MAAK,SAAS,EAAC,UAAU;MAAA,wBACrB;QAAI,SAAS,EAAC,aAAa;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB,eAC7C;QAAK,SAAS,EAAC,oBAAoB;QAAA,wBAC/B,QAAC,QAAQ;UACL,QAAQ,EAAEC,QAAS;UACnB,KAAK,EAAEV,IAAK;UAEZ,WAAW,EAAC,OAAO;UACnB,SAAS,EAAC,SAAS;UACnB,aAAa,EAAC,kBAAkB;UAChC,UAAU,EAAC,QAAQ;UACnB,cAAc,EAAC,iBAAiB;UAChC,SAAS,EAAC,SAAS;UACnB,aAAa,EAAC,kBAAkB;UAChC,UAAU,EAAC,QAAQ;UACnB,cAAc,EAAC,iBAAiB;UAChC,YAAY,EAAC,IAAI;UACjB,aAAa,EAAC,MAAM;UACpB,WAAW,EAAE,IAAK;UAElB,UAAU;;UAKd;;UAEA;QAAA;UAAA;UAAA;UAAA;QAAA,QAEE,EACDW,OAAO,CAACC,GAAG,CAACZ,IAAI,CAAC,oBAEHA,IAAI,CAACS,YAAY,EAAE;MAAA;QAAA;QAAA;QAAA;MAAA,QAEhC;IAAA;MAAA;MAAA;MAAA;IAAA;EAoBJ,iBAiBP;AAGX,CAAC;;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA,GA1JaV,cAAc;AAAA,KAAdA,cAAc;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
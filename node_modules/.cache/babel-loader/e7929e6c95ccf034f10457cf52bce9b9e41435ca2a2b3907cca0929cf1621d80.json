{"ast":null,"code":"var _jsxFileName = \"/Users/lohanson/Desktop/FatBackStudio/fatback-studio/src/components/calendar/Calendar.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\n//import {CalendarDates} from \"./CalendarDates.js\"\nimport \"./Calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MyCalendar = () => {\n  _s();\n  const [date, setDate] = useState(new Date());\n  const handleSaveDateButton = () => {};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"Our Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-container\",\n        children: /*#__PURE__*/_jsxDEV(Calendar, {\n          onChange: setDate,\n          value: date,\n          defaultView: \"month\",\n          nextLabel: \"month>>\",\n          nextAriaLabel: \"Go to next month\",\n          next2Label: \"year>>\",\n          next2AriaLabel: \"Go to next year\",\n          prevLabel: \"<<month\",\n          prevAriaLabel: \"Go to prev month\",\n          prev2Label: \"<<year\",\n          prev2AriaLabel: \"Go to prev year\",\n          calendarType: \"US\",\n          tileClassName: \"days\",\n          selectRange: true,\n          calen: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), date.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bold\",\n          children: \"Start Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), ' ', date[0].toDateString(), \"\\xA0|\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bold\",\n          children: \"End Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), \" \", date[1].toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bold\",\n          children: \"Today's Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), ' ', date.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onChange: clickEvent => {\n        handleSaveDateButton(clickEvent);\n      },\n      children: \"Save New Dates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n/*\nexport const MyCalendar = () => {\n\n    const [date, setDate] = useState(new Date())\n\n    useEffect(() => { \n\n        fetch('')\n            .then(response => response.json())\n            .then((startDate) => { \n                setDate(startDate)\n            })\n    }, [])\n\n    return (\n        <>\n            \n            <div className=\"calendar-container\">\n                <Calendar onChange={setDate} value={date} defaultView='month' />\n                <p className=\"bold text-center\">Selected Date: {\"\"}{date.toDateString()}</p>\n            </div>\n            {date.length > 0 ? (\n                <p className='text-center'>\n                    <span className='bold'>Start:</span>{' '}\n                    {date[0].toDateString()}\n                    &nbsp;|&nbsp;\n                    <span className='bold'>End:</span> {date[1].toDateString()}\n                </p>) : (<p className='text-center'>\n                    <span className='bold'>Default selected date:</span>{' '}\n                    {date.toDateString()}\n                </p>)}\n        </>\n    )\n}\n*/\n\n/*\nfunction App() {\n\n  const [value, onChange] = useState([new Date()])\n\n  return (\n    <div>\n      <Calendar\n        onChange={onChange}\n        value={value}\n        defaultView='month'\n        nextLabel='month>>'\n        nextAriaLabel='Go to next month'\n        next2Label='year>>'\n        next2AriaLabel='Go to next year'\n        prevLabel='<<month'\n        prevAriaLabel='Go to prev month'\n        prev2Label='<<year'\n        prev2AriaLabel='Go to prev year'\n        calendarType=\"US\"\n        tileClassName=\"days\"\n        selectRange={true} />\n      {value.toString()}\n\n\n    </div>\n  )\n}\n*/\n_s(MyCalendar, \"rW+rxy2mJ1oFEB1Cqg4Z2uVJym0=\");\n_c = MyCalendar;\nvar _c;\n$RefreshReg$(_c, \"MyCalendar\");","map":{"version":3,"names":["useEffect","useState","Calendar","MyCalendar","date","setDate","Date","handleSaveDateButton","length","toDateString","clickEvent"],"sources":["/Users/lohanson/Desktop/FatBackStudio/fatback-studio/src/components/calendar/Calendar.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport Calendar from 'react-calendar'\nimport 'react-calendar/dist/Calendar.css';\n//import {CalendarDates} from \"./CalendarDates.js\"\nimport \"./Calendar.css\"\n\n\nexport const MyCalendar = () => {\n\n    const [date, setDate] = useState(new Date())\n    \n\n    const handleSaveDateButton = () => { \n\n\n    }\n    \n    return (\n        <>\n        <div className='calendar'>\n            <h1 className='text-center'>Our Schedule</h1>\n            <div className='calendar-container'>\n                <Calendar\n                    onChange={setDate}\n                    value={date}\n                    defaultView='month'\n                    nextLabel='month>>'\n                    nextAriaLabel='Go to next month'\n                    next2Label='year>>'\n                    next2AriaLabel='Go to next year'\n                    prevLabel='<<month'\n                    prevAriaLabel='Go to prev month'\n                    prev2Label='<<year'\n                    prev2AriaLabel='Go to prev year'\n                    calendarType=\"US\"\n                    tileClassName=\"days\"\n                    selectRange={true}\n                    calen\n                    \n                    />\n\n            </div>\n\n            {date.length > 0 ? (\n                <p className='text-center'>\n                    <span className='bold'>Start Date:</span>{' '}\n                    {date[0].toDateString()}\n                    &nbsp;|&nbsp;\n                    <span className='bold'>End Date:</span> {date[1].toDateString()}\n                </p>\n            ) : (\n                <p className='text-center'>\n                    <span className='bold'>Today's Date:</span>{' '}\n                    {date.toDateString()}\n                </p>\n            )}\n        </div>\n      \n        <button\n            onChange={(clickEvent) => { \n                handleSaveDateButton(clickEvent)\n            }}>\n                Save New Dates\n        </button>\n        </>\n\n)\n}\n\n\n\n\n/*\nexport const MyCalendar = () => {\n\n    const [date, setDate] = useState(new Date())\n\n    useEffect(() => { \n\n        fetch('')\n            .then(response => response.json())\n            .then((startDate) => { \n                setDate(startDate)\n            })\n    }, [])\n\n    return (\n        <>\n            \n            <div className=\"calendar-container\">\n                <Calendar onChange={setDate} value={date} defaultView='month' />\n                <p className=\"bold text-center\">Selected Date: {\"\"}{date.toDateString()}</p>\n            </div>\n            {date.length > 0 ? (\n                <p className='text-center'>\n                    <span className='bold'>Start:</span>{' '}\n                    {date[0].toDateString()}\n                    &nbsp;|&nbsp;\n                    <span className='bold'>End:</span> {date[1].toDateString()}\n                </p>) : (<p className='text-center'>\n                    <span className='bold'>Default selected date:</span>{' '}\n                    {date.toDateString()}\n                </p>)}\n        </>\n    )\n}\n*/\n\n\n/*\nfunction App() {\n\n  const [value, onChange] = useState([new Date()])\n\n  return (\n    <div>\n      <Calendar\n        onChange={onChange}\n        value={value}\n        defaultView='month'\n        nextLabel='month>>'\n        nextAriaLabel='Go to next month'\n        next2Label='year>>'\n        next2AriaLabel='Go to next year'\n        prevLabel='<<month'\n        prevAriaLabel='Go to prev month'\n        prev2Label='<<year'\n        prev2AriaLabel='Go to prev year'\n        calendarType=\"US\"\n        tileClassName=\"days\"\n        selectRange={true} />\n      {value.toString()}\n\n\n    </div>\n  )\n}\n*/"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAO,kCAAkC;AACzC;AACA,OAAO,gBAAgB;AAAA;AAAA;AAGvB,OAAO,MAAMC,UAAU,GAAG,MAAM;EAAA;EAE5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,IAAIK,IAAI,EAAE,CAAC;EAG5C,MAAMC,oBAAoB,GAAG,MAAM,CAGnC,CAAC;EAED,oBACI;IAAA,wBACA;MAAK,SAAS,EAAC,UAAU;MAAA,wBACrB;QAAI,SAAS,EAAC,aAAa;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB,eAC7C;QAAK,SAAS,EAAC,oBAAoB;QAAA,uBAC/B,QAAC,QAAQ;UACL,QAAQ,EAAEF,OAAQ;UAClB,KAAK,EAAED,IAAK;UACZ,WAAW,EAAC,OAAO;UACnB,SAAS,EAAC,SAAS;UACnB,aAAa,EAAC,kBAAkB;UAChC,UAAU,EAAC,QAAQ;UACnB,cAAc,EAAC,iBAAiB;UAChC,SAAS,EAAC,SAAS;UACnB,aAAa,EAAC,kBAAkB;UAChC,UAAU,EAAC,QAAQ;UACnB,cAAc,EAAC,iBAAiB;UAChC,YAAY,EAAC,IAAI;UACjB,aAAa,EAAC,MAAM;UACpB,WAAW,EAAE,IAAK;UAClB,KAAK;QAAA;UAAA;UAAA;UAAA;QAAA;MAEH;QAAA;QAAA;QAAA;MAAA,QAEJ,EAELA,IAAI,CAACI,MAAM,GAAG,CAAC,gBACZ;QAAG,SAAS,EAAC,aAAa;QAAA,wBACtB;UAAM,SAAS,EAAC,MAAM;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAmB,EAAC,GAAG,EAC5CJ,IAAI,CAAC,CAAC,CAAC,CAACK,YAAY,EAAE,4BAEvB;UAAM,SAAS,EAAC,MAAM;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAiB,OAAEL,IAAI,CAAC,CAAC,CAAC,CAACK,YAAY,EAAE;MAAA;QAAA;QAAA;QAAA;MAAA,QAC/D,gBAEJ;QAAG,SAAS,EAAC,aAAa;QAAA,wBACtB;UAAM,SAAS,EAAC,MAAM;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAqB,EAAC,GAAG,EAC9CL,IAAI,CAACK,YAAY,EAAE;MAAA;QAAA;QAAA;QAAA;MAAA,QAE3B;IAAA;MAAA;MAAA;MAAA;IAAA,QACC,eAEN;MACI,QAAQ,EAAGC,UAAU,IAAK;QACtBH,oBAAoB,CAACG,UAAU,CAAC;MACpC,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAEG;EAAA,gBACN;AAGX,CAAC;;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA,GAtGaP,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
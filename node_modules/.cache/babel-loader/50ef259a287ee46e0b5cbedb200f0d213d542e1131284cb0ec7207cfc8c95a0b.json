{"ast":null,"code":"/*\nimport { useEffect, useState } from 'react'\nimport Calendar from 'react-calendar'\nimport 'react-calendar/dist/Calendar.css';\n//import {CalendarDates} from \"./CalendarDates.js\"\nimport \"./Calendar.css\"\n\n\nexport const StudioCalendar = () => {\n\n\n    const [date, setDate] = useState(new Date())\n    // const [startDate, setStartDate] = useState({})\n    // const [endDate, setEndDate] = useState({})\n    //const [acceptedRequests, setAccepted] = useState([])\n\n\n\n    // useEffect(() => {\n\n    //     fetch(`http://localhost:8088/requests?isAccepted=true`)\n    //         .then(response => response.json())\n    //         .then(acceptedDates => {\n    //             onChange(acceptedDates)\n    //         })\n    // }, [])\n\n    // const handleSaveDateButton = () => {\n\n    //     const setRecordingDate = {\n    //         start: startDate.date[0].toDateString()\n\n    //     }\n\n    // }\n\n\n    return (\n        <>\n            <div className='calendar'>\n                <h1 className='text-center'>Our Schedule</h1>\n                <div className='calendar-container'>\n                    <Calendar\n                        onChange={setDate}\n                        value={date}\n                        defaultView='month'\n                        nextLabel='month>>'\n                        nextAriaLabel='Go to next month'\n                        next2Label='year>>'\n                        next2AriaLabel='Go to next year'\n                        prevLabel='<<month'\n                        prevAriaLabel='Go to prev month'\n                        prev2Label='<<year'\n                        prev2AriaLabel='Go to prev year'\n                        calendarType=\"US\"\n                        tileClassName=\"days\"\n                        selectRange={true}\n                        \n                        \n\n\n                        // onClickDay={(value, event) => alert('Clicked day: ', {value})}\n\n                        // tileContent={({ activeStartDate, date, view }) => view === 'month' && date.getDay() === 0 ? <p>It's Sunday!</p> : null}\n\n                    />\n                \n                </div>\n\n\n\n                {date.length > 0 ? (\n                    <p className='text-center'>\n                        <span className='bold'>Start Date:</span>{' '}\n                        {date[0].toDateString()}\n                        &nbsp;|&nbsp;\n                        <span className='bold'>End Date:</span> {date[1].toDateString()}\n                    </p>\n                ) : (\n                    <p className='text-center'>\n                        <span className='bold'>Today's Date:</span>{' '}\n                        {date.toDateString()}\n                    </p>\n                )} \n\n\n\n            </div>\n            {/* \n            {dates.map(acceptedRequest => {\n                return <p className='text-center'>\n                    {acceptedRequest.bandName}<br></br>\n                    {acceptedRequest.startDate}<br></br>\n                    {acceptedRequest.endDate}\n\n\n                </p>\n            })\n\n            } \n\n            {/* <button>\n                Save New Dates\n            </button> \n        </>\n\n    )\n}\n\n\n\n\n/*\nexport const MyCalendar = () => {\n\n    const [date, setDate] = useState(new Date())\n\n    useEffect(() => { \n\n        fetch('')\n            .then(response => response.json())\n            .then((startDate) => { \n                setDate(startDate)\n            })\n    }, [])\n\n    return (\n        <>\n            \n            <div className=\"calendar-container\">\n                <Calendar onChange={setDate} value={date} defaultView='month' />\n                <p className=\"bold text-center\">Selected Date: {\"\"}{date.toDateString()}</p>\n            </div>\n            {date.length > 0 ? (\n                <p className='text-center'>\n                    <span className='bold'>Start:</span>{' '}\n                    {date[0].toDateString()}\n                    &nbsp;|&nbsp;\n                    <span className='bold'>End:</span> {date[1].toDateString()}\n                </p>) : (<p className='text-center'>\n                    <span className='bold'>Default selected date:</span>{' '}\n                    {date.toDateString()}\n                </p>)}\n        </>\n    )\n}\n*/\n\n/*\nfunction App() {\n\n  const [value, onChange] = useState([new Date()])\n\n  return (\n    <div>\n      <Calendar\n        onChange={onChange}\n        value={value}\n        defaultView='month'\n        nextLabel='month>>'\n        nextAriaLabel='Go to next month'\n        next2Label='year>>'\n        next2AriaLabel='Go to next year'\n        prevLabel='<<month'\n        prevAriaLabel='Go to prev month'\n        prev2Label='<<year'\n        prev2AriaLabel='Go to prev year'\n        calendarType=\"US\"\n        tileClassName=\"days\"\n        selectRange={true} />\n      {value.toString()}\n\n\n    </div>\n  )\n}\n*/","map":{"version":3,"names":[],"sources":["/Users/lohanson/Desktop/FatBackStudio/fatback-studio/src/components/calendar/Calendar.js"],"sourcesContent":["/*\nimport { useEffect, useState } from 'react'\nimport Calendar from 'react-calendar'\nimport 'react-calendar/dist/Calendar.css';\n//import {CalendarDates} from \"./CalendarDates.js\"\nimport \"./Calendar.css\"\n\n\nexport const StudioCalendar = () => {\n\n\n    const [date, setDate] = useState(new Date())\n    // const [startDate, setStartDate] = useState({})\n    // const [endDate, setEndDate] = useState({})\n    //const [acceptedRequests, setAccepted] = useState([])\n\n\n\n    // useEffect(() => {\n\n    //     fetch(`http://localhost:8088/requests?isAccepted=true`)\n    //         .then(response => response.json())\n    //         .then(acceptedDates => {\n    //             onChange(acceptedDates)\n    //         })\n    // }, [])\n\n    // const handleSaveDateButton = () => {\n\n    //     const setRecordingDate = {\n    //         start: startDate.date[0].toDateString()\n\n    //     }\n\n    // }\n\n\n    return (\n        <>\n            <div className='calendar'>\n                <h1 className='text-center'>Our Schedule</h1>\n                <div className='calendar-container'>\n                    <Calendar\n                        onChange={setDate}\n                        value={date}\n                        defaultView='month'\n                        nextLabel='month>>'\n                        nextAriaLabel='Go to next month'\n                        next2Label='year>>'\n                        next2AriaLabel='Go to next year'\n                        prevLabel='<<month'\n                        prevAriaLabel='Go to prev month'\n                        prev2Label='<<year'\n                        prev2AriaLabel='Go to prev year'\n                        calendarType=\"US\"\n                        tileClassName=\"days\"\n                        selectRange={true}\n                        \n                        \n\n\n                        // onClickDay={(value, event) => alert('Clicked day: ', {value})}\n\n                        // tileContent={({ activeStartDate, date, view }) => view === 'month' && date.getDay() === 0 ? <p>It's Sunday!</p> : null}\n\n                    />\n                \n                </div>\n\n\n\n                {date.length > 0 ? (\n                    <p className='text-center'>\n                        <span className='bold'>Start Date:</span>{' '}\n                        {date[0].toDateString()}\n                        &nbsp;|&nbsp;\n                        <span className='bold'>End Date:</span> {date[1].toDateString()}\n                    </p>\n                ) : (\n                    <p className='text-center'>\n                        <span className='bold'>Today's Date:</span>{' '}\n                        {date.toDateString()}\n                    </p>\n                )} \n\n\n\n            </div>\n            {/* \n            {dates.map(acceptedRequest => {\n                return <p className='text-center'>\n                    {acceptedRequest.bandName}<br></br>\n                    {acceptedRequest.startDate}<br></br>\n                    {acceptedRequest.endDate}\n\n\n                </p>\n            })\n\n            } \n\n            {/* <button>\n                Save New Dates\n            </button> \n        </>\n\n    )\n}\n\n\n\n\n/*\nexport const MyCalendar = () => {\n\n    const [date, setDate] = useState(new Date())\n\n    useEffect(() => { \n\n        fetch('')\n            .then(response => response.json())\n            .then((startDate) => { \n                setDate(startDate)\n            })\n    }, [])\n\n    return (\n        <>\n            \n            <div className=\"calendar-container\">\n                <Calendar onChange={setDate} value={date} defaultView='month' />\n                <p className=\"bold text-center\">Selected Date: {\"\"}{date.toDateString()}</p>\n            </div>\n            {date.length > 0 ? (\n                <p className='text-center'>\n                    <span className='bold'>Start:</span>{' '}\n                    {date[0].toDateString()}\n                    &nbsp;|&nbsp;\n                    <span className='bold'>End:</span> {date[1].toDateString()}\n                </p>) : (<p className='text-center'>\n                    <span className='bold'>Default selected date:</span>{' '}\n                    {date.toDateString()}\n                </p>)}\n        </>\n    )\n}\n*/\n\n\n/*\nfunction App() {\n\n  const [value, onChange] = useState([new Date()])\n\n  return (\n    <div>\n      <Calendar\n        onChange={onChange}\n        value={value}\n        defaultView='month'\n        nextLabel='month>>'\n        nextAriaLabel='Go to next month'\n        next2Label='year>>'\n        next2AriaLabel='Go to next year'\n        prevLabel='<<month'\n        prevAriaLabel='Go to prev month'\n        prev2Label='<<year'\n        prev2AriaLabel='Go to prev year'\n        calendarType=\"US\"\n        tileClassName=\"days\"\n        selectRange={true} />\n      {value.toString()}\n\n\n    </div>\n  )\n}\n*/"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}
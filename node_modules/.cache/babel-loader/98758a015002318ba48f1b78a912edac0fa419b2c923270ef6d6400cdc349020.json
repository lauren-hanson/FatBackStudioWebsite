{"ast":null,"code":"var _jsxFileName = \"/Users/lohanson/Desktop/FatBackStudio/fatback-studio/src/components/calender/Calender.js\",\n  _s = $RefreshSig$();\n/*\nimport { useRef, useState } from \"react\";\nimport {\n    SevenColGrid,\n    Wrapper,\n    HeadDays,\n    DateControls,\n    StyledEvent,\n    SeeMore,\n    PortalWrapper\n} from \"./Calender.styled\";\nimport { MOCKAPPS } from \"./conts\";\nimport {\n    datesAreOnSameDay,\n    getDarkColor,\n    getDaysInMonth,\n    getMonthYear,\n    nextMonth,\n    prevMonth,\n    range,\n    sortDays\n} from \"./utils\";\n\nexport const Calender = () => {\n    const [currentDate, setCurrentDate] = useState(new Date(2022, 9, 1));\n    const [events, setEvents] = useState(MOCKAPPS);\n    const dragDateRef = useRef();\n    const dragindexRef = useRef();\n    const [showPortal, setShowPortal] = useState(false);\n    const [portalData, setPortalData] = useState({});\n\n    const addEvent = (date, event) => {\n        if (!event.target.classList.contains(\"StyledEvent\")) {\n            const text = window.prompt(\"name\");\n            if (text) {\n                date.setHours(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n                setEvents((prev) => [\n                    ...prev,\n                    { date, title: text, color: getDarkColor() }\n                ]);\n            }\n        }\n    };\n\n    const drag = (index, e) => {\n        dragindexRef.current = { index, target: e.target };\n    };\n\n    const onDragEnter = (date, e) => {\n        e.preventDefault();\n        dragDateRef.current = { date, target: e.target.id };\n    };\n\n    const drop = (ev) => {\n        ev.preventDefault();\n\n        setEvents((prev) =>\n            prev.map((ev, index) => {\n                if (index === dragindexRef.current.index) {\n                    ev.date = dragDateRef.current.date;\n                }\n                return ev;\n            })\n        );\n    };\n\n    const handleOnClickEvent = (event) => {\n        setShowPortal(true);\n        setPortalData(event);\n    };\n\n    const handlePotalClose = () => setShowPortal(false);\n\n    const handleDelete = () => {\n        setEvents((prevEvents) =>\n            prevEvents.filter((ev) => ev.title !== portalData.title)\n        );\n        handlePotalClose();\n    };\n\n    return (\n        <Wrapper>\n            <DateControls>\n                <ion-icon\n                    onClick={() => prevMonth(currentDate, setCurrentDate)}\n                    name=\"arrow-back-circle-outline\"\n                ></ion-icon>\n                {getMonthYear(currentDate)}\n                <ion-icon\n                    onClick={() => nextMonth(currentDate, setCurrentDate)}\n                    name=\"arrow-forward-circle-outline\"\n                ></ion-icon>\n            </DateControls>\n            <SevenColGrid>\n                {sortDays(currentDate).map((day) => (\n                    <HeadDays className=\"nonDRAG\">{day}</HeadDays>\n                ))}\n            </SevenColGrid>\n\n            <SevenColGrid\n                fullheight={true}\n                is28Days={getDaysInMonth(currentDate) === 28}\n            >\n                {range(getDaysInMonth(currentDate)).map((day) => (\n                    <div\n                        id={`${currentDate.getFullYear()}/${currentDate.getMonth()}/${day}`}\n                        onDragEnter={(e) =>\n                            onDragEnter(\n                                new Date(\n                                    currentDate.getFullYear(),\n                                    currentDate.getMonth(),\n                                    day\n                                ),\n                                e\n                            )\n                        }\n                        onDragOver={(e) => e.preventDefault()}\n                        onDragEnd={drop}\n                        onClick={(e) =>\n                            addEvent(\n                                new Date(\n                                    currentDate.getFullYear(),\n                                    currentDate.getMonth(),\n                                    day\n                                ),\n                                e\n                            )\n                        }\n                    >\n                        <span\n                            className={`nonDRAG ${datesAreOnSameDay(\n                                new Date(),\n                                new Date(\n                                    currentDate.getFullYear(),\n                                    currentDate.getMonth(),\n                                    day\n                                )\n                            )\n                                    ? \"active\"\n                                    : \"\"\n                                }`}\n                        >\n                            {day}\n                        </span>\n                        <EventWrapper>\n                            {events.map(\n                                (ev, index) =>\n                                    datesAreOnSameDay(\n                                        ev.date,\n                                        new Date(\n                                            currentDate.getFullYear(),\n                                            currentDate.getMonth(),\n                                            day\n                                        )\n                                    ) && (\n                                        <StyledEvent\n                                            onDragStart={(e) => drag(index, e)}\n                                            onClick={() => handleOnClickEvent(ev)}\n                                            draggable\n                                            className=\"StyledEvent\"\n                                            id={`${ev.color} ${ev.title}`}\n                                            key={ev.title}\n                                            bgColor={ev.color}\n                                        >\n                                            {ev.title}\n                                        </StyledEvent>\n                                    )\n                            )}\n                        </EventWrapper>\n                    </div>\n                ))}\n            </SevenColGrid>\n            {showPortal && (\n                <Portal\n                    {...portalData}\n                    handleDelete={handleDelete}\n                    handlePotalClose={handlePotalClose}\n                />\n            )}\n        </Wrapper>\n    );\n};\n\nconst EventWrapper = ({ children }) => {\n    if (children.filter((child) => child).length)\n        return (\n            <>\n                {children}\n                {children.filter((child) => child).length > 2 && (\n                    <SeeMore\n                        onClick={(e) => {\n                            e.stopPropagation();\n                            console.log(\"clicked p\");\n                        }}\n                    >\n                        see more...\n                    </SeeMore>\n                )}\n            </>\n        );\n};\n\nconst Portal = ({ title, date, handleDelete, handlePotalClose }) => {\n    return (\n        <PortalWrapper>\n            <h2>{title}</h2>\n            <p>{date.toDateString()}</p>\n            <ion-icon onClick={handleDelete} name=\"trash-outline\"></ion-icon>\n            <ion-icon onClick={handlePotalClose} name=\"close-outline\"></ion-icon>\n        </PortalWrapper>\n    );\n};\n*/\n\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { WorkingCalendar } from \"./WorkingCalendar\";\nimport \"./Calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Calender = () => {\n  _s();\n  const [requests, setRequest] = useState([]);\n  const localFatBackUser = localStorage.getItem(\"fatback_user\");\n  const fatbackUserObject = JSON.parse(localFatBackUser);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetch(`http://localhost:8088/requests?isAccepted=true`).then(response => response.json()).then(requestInfo => {\n      setRequest(requestInfo);\n    });\n  }, []);\n  const getAllRequests = () => {\n    fetch(`http://localhost:8088/requests?_expand=genre&userId=${fatbackUserObject.id}`).then(response => response.json()).then(requestInfo => {\n      setRequest(requestInfo);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [requests.isAccepted === true ? requests.map(request => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: request.bandName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 24\n      }, this);\n    }) : \"\", /*#__PURE__*/_jsxDEV(WorkingCalendar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Calender, \"AFl6BMFCvYk+XH49xvea40ZPmHk=\", false, function () {\n  return [useNavigate];\n});\n_c = Calender;\nvar _c;\n$RefreshReg$(_c, \"Calender\");","map":{"version":3,"names":["useState","useEffect","useNavigate","WorkingCalendar","Calender","requests","setRequest","localFatBackUser","localStorage","getItem","fatbackUserObject","JSON","parse","navigate","fetch","then","response","json","requestInfo","getAllRequests","id","isAccepted","map","request","bandName"],"sources":["/Users/lohanson/Desktop/FatBackStudio/fatback-studio/src/components/calender/Calender.js"],"sourcesContent":["\n\n/*\nimport { useRef, useState } from \"react\";\nimport {\n    SevenColGrid,\n    Wrapper,\n    HeadDays,\n    DateControls,\n    StyledEvent,\n    SeeMore,\n    PortalWrapper\n} from \"./Calender.styled\";\nimport { MOCKAPPS } from \"./conts\";\nimport {\n    datesAreOnSameDay,\n    getDarkColor,\n    getDaysInMonth,\n    getMonthYear,\n    nextMonth,\n    prevMonth,\n    range,\n    sortDays\n} from \"./utils\";\n\nexport const Calender = () => {\n    const [currentDate, setCurrentDate] = useState(new Date(2022, 9, 1));\n    const [events, setEvents] = useState(MOCKAPPS);\n    const dragDateRef = useRef();\n    const dragindexRef = useRef();\n    const [showPortal, setShowPortal] = useState(false);\n    const [portalData, setPortalData] = useState({});\n\n    const addEvent = (date, event) => {\n        if (!event.target.classList.contains(\"StyledEvent\")) {\n            const text = window.prompt(\"name\");\n            if (text) {\n                date.setHours(0);\n                date.setSeconds(0);\n                date.setMilliseconds(0);\n                setEvents((prev) => [\n                    ...prev,\n                    { date, title: text, color: getDarkColor() }\n                ]);\n            }\n        }\n    };\n\n    const drag = (index, e) => {\n        dragindexRef.current = { index, target: e.target };\n    };\n\n    const onDragEnter = (date, e) => {\n        e.preventDefault();\n        dragDateRef.current = { date, target: e.target.id };\n    };\n\n    const drop = (ev) => {\n        ev.preventDefault();\n\n        setEvents((prev) =>\n            prev.map((ev, index) => {\n                if (index === dragindexRef.current.index) {\n                    ev.date = dragDateRef.current.date;\n                }\n                return ev;\n            })\n        );\n    };\n\n    const handleOnClickEvent = (event) => {\n        setShowPortal(true);\n        setPortalData(event);\n    };\n\n    const handlePotalClose = () => setShowPortal(false);\n\n    const handleDelete = () => {\n        setEvents((prevEvents) =>\n            prevEvents.filter((ev) => ev.title !== portalData.title)\n        );\n        handlePotalClose();\n    };\n\n    return (\n        <Wrapper>\n            <DateControls>\n                <ion-icon\n                    onClick={() => prevMonth(currentDate, setCurrentDate)}\n                    name=\"arrow-back-circle-outline\"\n                ></ion-icon>\n                {getMonthYear(currentDate)}\n                <ion-icon\n                    onClick={() => nextMonth(currentDate, setCurrentDate)}\n                    name=\"arrow-forward-circle-outline\"\n                ></ion-icon>\n            </DateControls>\n            <SevenColGrid>\n                {sortDays(currentDate).map((day) => (\n                    <HeadDays className=\"nonDRAG\">{day}</HeadDays>\n                ))}\n            </SevenColGrid>\n\n            <SevenColGrid\n                fullheight={true}\n                is28Days={getDaysInMonth(currentDate) === 28}\n            >\n                {range(getDaysInMonth(currentDate)).map((day) => (\n                    <div\n                        id={`${currentDate.getFullYear()}/${currentDate.getMonth()}/${day}`}\n                        onDragEnter={(e) =>\n                            onDragEnter(\n                                new Date(\n                                    currentDate.getFullYear(),\n                                    currentDate.getMonth(),\n                                    day\n                                ),\n                                e\n                            )\n                        }\n                        onDragOver={(e) => e.preventDefault()}\n                        onDragEnd={drop}\n                        onClick={(e) =>\n                            addEvent(\n                                new Date(\n                                    currentDate.getFullYear(),\n                                    currentDate.getMonth(),\n                                    day\n                                ),\n                                e\n                            )\n                        }\n                    >\n                        <span\n                            className={`nonDRAG ${datesAreOnSameDay(\n                                new Date(),\n                                new Date(\n                                    currentDate.getFullYear(),\n                                    currentDate.getMonth(),\n                                    day\n                                )\n                            )\n                                    ? \"active\"\n                                    : \"\"\n                                }`}\n                        >\n                            {day}\n                        </span>\n                        <EventWrapper>\n                            {events.map(\n                                (ev, index) =>\n                                    datesAreOnSameDay(\n                                        ev.date,\n                                        new Date(\n                                            currentDate.getFullYear(),\n                                            currentDate.getMonth(),\n                                            day\n                                        )\n                                    ) && (\n                                        <StyledEvent\n                                            onDragStart={(e) => drag(index, e)}\n                                            onClick={() => handleOnClickEvent(ev)}\n                                            draggable\n                                            className=\"StyledEvent\"\n                                            id={`${ev.color} ${ev.title}`}\n                                            key={ev.title}\n                                            bgColor={ev.color}\n                                        >\n                                            {ev.title}\n                                        </StyledEvent>\n                                    )\n                            )}\n                        </EventWrapper>\n                    </div>\n                ))}\n            </SevenColGrid>\n            {showPortal && (\n                <Portal\n                    {...portalData}\n                    handleDelete={handleDelete}\n                    handlePotalClose={handlePotalClose}\n                />\n            )}\n        </Wrapper>\n    );\n};\n\nconst EventWrapper = ({ children }) => {\n    if (children.filter((child) => child).length)\n        return (\n            <>\n                {children}\n                {children.filter((child) => child).length > 2 && (\n                    <SeeMore\n                        onClick={(e) => {\n                            e.stopPropagation();\n                            console.log(\"clicked p\");\n                        }}\n                    >\n                        see more...\n                    </SeeMore>\n                )}\n            </>\n        );\n};\n\nconst Portal = ({ title, date, handleDelete, handlePotalClose }) => {\n    return (\n        <PortalWrapper>\n            <h2>{title}</h2>\n            <p>{date.toDateString()}</p>\n            <ion-icon onClick={handleDelete} name=\"trash-outline\"></ion-icon>\n            <ion-icon onClick={handlePotalClose} name=\"close-outline\"></ion-icon>\n        </PortalWrapper>\n    );\n};\n*/\n\n\n\n\n\n\nimport { useState, useEffect } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport { WorkingCalendar } from \"./WorkingCalendar\"\nimport \"./Calendar.css\"\n\nexport const Calender = () => {\n\n    const [requests, setRequest] = useState([])\n\n    const localFatBackUser = localStorage.getItem(\"fatback_user\")\n    const fatbackUserObject = JSON.parse(localFatBackUser)\n\n    const navigate = useNavigate()\n\n    useEffect(\n        () => {\n            fetch(`http://localhost:8088/requests?isAccepted=true`)\n                .then(response => response.json())\n                .then((requestInfo) => {\n                    setRequest(requestInfo)\n                })\n        }, []\n    )\n\n\n    const getAllRequests = () => {\n        fetch(`http://localhost:8088/requests?_expand=genre&userId=${fatbackUserObject.id}`)\n            .then(response => response.json())\n            .then((requestInfo) => {\n                setRequest(requestInfo)\n            })\n    }\n\n    return (\n        <>\n\n            {requests.isAccepted === true\n            ?  \n            requests.map(request => { \n                return <div>{request.bandName}</div>  \n            }) : \"\"}\n         \n\n        <WorkingCalendar /> \n        </>\n    )\n}\n"],"mappingskBAAkB;AAC9C,SAASC,eAAe,QAAQ,mBAAmB;AACnD,OAAO,gBAAgB;AAAA;AAAA;AAEvB,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAAA;EAE1B,MAAM,CAACC,QAAQ,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE3C,MAAMO,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAC7D,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAACL,gBAAgB,CAAC;EAEtD,MAAMM,QAAQ,GAAGX,WAAW,EAAE;EAE9BD,SAAS,CACL,MAAM;IACFa,KAAK,CAAE,gDAA+C,CAAC,CAClDC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAAEG,WAAW,IAAK;MACnBZ,UAAU,CAACY,WAAW,CAAC;IAC3B,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CACR;EAGD,MAAMC,cAAc,GAAG,MAAM;IACzBL,KAAK,CAAE,uDAAsDJ,iBAAiB,CAACU,EAAG,EAAC,CAAC,CAC/EL,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAAEG,WAAW,IAAK;MACnBZ,UAAU,CAACY,WAAW,CAAC;IAC3B,CAAC,CAAC;EACV,CAAC;EAED,oBACI;IAAA,WAEKb,QAAQ,CAACgB,UAAU,KAAK,IAAI,GAE7BhB,QAAQ,CAACiB,GAAG,CAACC,OAAO,IAAI;MACpB,oBAAO;QAAA,UAAMA,OAAO,CAACC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAO;IACxC,CAAC,CAAC,GAAG,EAAE,eAGX,QAAC,eAAe;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA,gBAChB;AAEX,CAAC;AAAA,GAzCYpB,QAAQ;EAAA,QAOAF,WAAW;AAAA;AAAA,KAPnBE,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}